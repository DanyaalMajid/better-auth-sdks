# coding: utf-8

"""
    Better Auth

    API Reference for your Better Auth Instance

    The version of the OpenAPI document: 1.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class McpRegisterPost200Response(BaseModel):
    """
    McpRegisterPost200Response
    """ # noqa: E501
    name: StrictStr = Field(description="Name of the OAuth2 application")
    icon: Optional[StrictStr] = Field(default=None, description="Icon URL for the application")
    metadata: Optional[Dict[str, Any]] = Field(default=None, description="Additional metadata for the application")
    client_id: StrictStr = Field(description="Unique identifier for the client", alias="clientId")
    client_secret: Optional[StrictStr] = Field(default=None, description="Secret key for the client. Not included for public clients.", alias="clientSecret")
    redirect_urls: List[StrictStr] = Field(description="List of allowed redirect URLs", alias="redirectURLs")
    type: StrictStr = Field(description="Type of the client")
    authentication_scheme: StrictStr = Field(description="Authentication scheme used by the client", alias="authenticationScheme")
    disabled: StrictBool = Field(description="Whether the client is disabled")
    user_id: Optional[StrictStr] = Field(default=None, description="ID of the user who registered the client, null if registered anonymously", alias="userId")
    created_at: datetime = Field(description="Creation timestamp", alias="createdAt")
    updated_at: datetime = Field(description="Last update timestamp", alias="updatedAt")
    __properties: ClassVar[List[str]] = ["name", "icon", "metadata", "clientId", "clientSecret", "redirectURLs", "type", "authenticationScheme", "disabled", "userId", "createdAt", "updatedAt"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['web', 'public']):
            raise ValueError("must be one of enum values ('web', 'public')")
        return value

    @field_validator('authentication_scheme')
    def authentication_scheme_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['client_secret', 'none']):
            raise ValueError("must be one of enum values ('client_secret', 'none')")
        return value

    @field_validator('disabled')
    def disabled_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['false']):
            raise ValueError("must be one of enum values ('false')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of McpRegisterPost200Response from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of McpRegisterPost200Response from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "icon": obj.get("icon"),
            "metadata": obj.get("metadata"),
            "clientId": obj.get("clientId"),
            "clientSecret": obj.get("clientSecret"),
            "redirectURLs": obj.get("redirectURLs"),
            "type": obj.get("type"),
            "authenticationScheme": obj.get("authenticationScheme"),
            "disabled": obj.get("disabled"),
            "userId": obj.get("userId"),
            "createdAt": obj.get("createdAt"),
            "updatedAt": obj.get("updatedAt")
        })
        return _obj


