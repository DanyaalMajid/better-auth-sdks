# coding: utf-8

"""
    Better Auth

    API Reference for your Better Auth Instance

    The version of the OpenAPI document: 1.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class SignInOauth2PostRequest(BaseModel):
    """
    SignInOauth2PostRequest
    """ # noqa: E501
    provider_id: StrictStr = Field(description="The provider ID for the OAuth provider", alias="providerId")
    callback_url: Optional[StrictStr] = Field(default=None, description="The URL to redirect to after sign in", alias="callbackURL")
    error_callback_url: Optional[StrictStr] = Field(default=None, description="The URL to redirect to if an error occurs", alias="errorCallbackURL")
    new_user_callback_url: Optional[StrictStr] = Field(default=None, description="The URL to redirect to after login if the user is new. Eg: \"/welcome\"", alias="newUserCallbackURL")
    disable_redirect: Optional[StrictBool] = Field(default=None, description="Disable redirect", alias="disableRedirect")
    scopes: Optional[List[Any]] = Field(default=None, description="Scopes to be passed to the provider authorization request.")
    request_sign_up: Optional[StrictBool] = Field(default=None, description="Explicitly request sign-up. Useful when disableImplicitSignUp is true for this provider. Eg: false", alias="requestSignUp")
    __properties: ClassVar[List[str]] = ["providerId", "callbackURL", "errorCallbackURL", "newUserCallbackURL", "disableRedirect", "scopes", "requestSignUp"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SignInOauth2PostRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SignInOauth2PostRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "providerId": obj.get("providerId"),
            "callbackURL": obj.get("callbackURL"),
            "errorCallbackURL": obj.get("errorCallbackURL"),
            "newUserCallbackURL": obj.get("newUserCallbackURL"),
            "disableRedirect": obj.get("disableRedirect"),
            "scopes": obj.get("scopes"),
            "requestSignUp": obj.get("requestSignUp")
        })
        return _obj


