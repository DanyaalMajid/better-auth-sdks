# coding: utf-8

"""
    Better Auth

    API Reference for your Better Auth Instance

    The version of the OpenAPI document: 1.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class User(BaseModel):
    """
    User
    """ # noqa: E501
    id: Optional[StrictStr] = None
    name: StrictStr
    email: StrictStr
    email_verified: StrictBool = Field(alias="emailVerified")
    image: Optional[StrictStr] = None
    created_at: StrictStr = Field(alias="createdAt")
    updated_at: StrictStr = Field(alias="updatedAt")
    two_factor_enabled: Optional[StrictBool] = Field(default=False, alias="twoFactorEnabled")
    username: Optional[StrictStr] = None
    display_username: Optional[StrictStr] = Field(default=None, alias="displayUsername")
    is_anonymous: Optional[StrictBool] = Field(default=None, alias="isAnonymous")
    phone_number: Optional[StrictStr] = Field(default=None, alias="phoneNumber")
    phone_number_verified: Optional[StrictBool] = Field(default=None, alias="phoneNumberVerified")
    role: Optional[StrictStr] = None
    banned: Optional[StrictBool] = False
    ban_reason: Optional[StrictStr] = Field(default=None, alias="banReason")
    ban_expires: Optional[StrictStr] = Field(default=None, alias="banExpires")
    __properties: ClassVar[List[str]] = ["id", "name", "email", "emailVerified", "image", "createdAt", "updatedAt", "twoFactorEnabled", "username", "displayUsername", "isAnonymous", "phoneNumber", "phoneNumberVerified", "role", "banned", "banReason", "banExpires"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of User from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "two_factor_enabled",
            "phone_number_verified",
            "role",
            "banned",
            "ban_reason",
            "ban_expires",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of User from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "email": obj.get("email"),
            "emailVerified": obj.get("emailVerified") if obj.get("emailVerified") is not None else False,
            "image": obj.get("image"),
            "createdAt": obj.get("createdAt") if obj.get("createdAt") is not None else 'Generated at runtime',
            "updatedAt": obj.get("updatedAt") if obj.get("updatedAt") is not None else 'Generated at runtime',
            "twoFactorEnabled": obj.get("twoFactorEnabled") if obj.get("twoFactorEnabled") is not None else False,
            "username": obj.get("username"),
            "displayUsername": obj.get("displayUsername"),
            "isAnonymous": obj.get("isAnonymous"),
            "phoneNumber": obj.get("phoneNumber"),
            "phoneNumberVerified": obj.get("phoneNumberVerified"),
            "role": obj.get("role"),
            "banned": obj.get("banned") if obj.get("banned") is not None else False,
            "banReason": obj.get("banReason"),
            "banExpires": obj.get("banExpires")
        })
        return _obj


