# coding: utf-8

"""
    Better Auth

    API Reference for your Better Auth Instance

    The version of the OpenAPI document: 1.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class Oauth2RegisterPostRequest(BaseModel):
    """
    Oauth2RegisterPostRequest
    """ # noqa: E501
    redirect_uris: List[Any] = Field(description="A list of redirect URIs. Eg: [\"https://client.example.com/callback\"]")
    token_endpoint_auth_method: Optional[StrictStr] = None
    grant_types: Optional[StrictStr] = None
    response_types: Optional[StrictStr] = None
    client_name: Optional[StrictStr] = Field(default=None, description="The name of the application. Eg: \"My App\"")
    client_uri: Optional[StrictStr] = Field(default=None, description="The URI of the application. Eg: \"https://client.example.com\"")
    logo_uri: Optional[StrictStr] = Field(default=None, description="The URI of the application logo. Eg: \"https://client.example.com/logo.png\"")
    scope: Optional[StrictStr] = Field(default=None, description="The scopes supported by the application. Separated by spaces. Eg: \"profile email\"")
    contacts: Optional[List[Any]] = Field(default=None, description="The contact information for the application. Eg: [\"admin@example.com\"]")
    tos_uri: Optional[StrictStr] = Field(default=None, description="The URI of the application terms of service. Eg: \"https://client.example.com/tos\"")
    policy_uri: Optional[StrictStr] = Field(default=None, description="The URI of the application privacy policy. Eg: \"https://client.example.com/policy\"")
    jwks_uri: Optional[StrictStr] = Field(default=None, description="The URI of the application JWKS. Eg: \"https://client.example.com/jwks\"")
    jwks: Optional[StrictStr] = Field(default=None, description="The JWKS of the application. Eg: {\"keys\": [{\"kty\": \"RSA\", \"alg\": \"RS256\", \"use\": \"sig\", \"n\": \"...\", \"e\": \"...\"}]}")
    metadata: Optional[StrictStr] = Field(default=None, description="The metadata of the application. Eg: {\"key\": \"value\"}")
    software_id: Optional[StrictStr] = Field(default=None, description="The software ID of the application. Eg: \"my-software\"")
    software_version: Optional[StrictStr] = Field(default=None, description="The software version of the application. Eg: \"1.0.0\"")
    software_statement: Optional[StrictStr] = Field(default=None, description="The software statement of the application.")
    __properties: ClassVar[List[str]] = ["redirect_uris", "token_endpoint_auth_method", "grant_types", "response_types", "client_name", "client_uri", "logo_uri", "scope", "contacts", "tos_uri", "policy_uri", "jwks_uri", "jwks", "metadata", "software_id", "software_version", "software_statement"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Oauth2RegisterPostRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Oauth2RegisterPostRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "redirect_uris": obj.get("redirect_uris"),
            "token_endpoint_auth_method": obj.get("token_endpoint_auth_method"),
            "grant_types": obj.get("grant_types"),
            "response_types": obj.get("response_types"),
            "client_name": obj.get("client_name"),
            "client_uri": obj.get("client_uri"),
            "logo_uri": obj.get("logo_uri"),
            "scope": obj.get("scope"),
            "contacts": obj.get("contacts"),
            "tos_uri": obj.get("tos_uri"),
            "policy_uri": obj.get("policy_uri"),
            "jwks_uri": obj.get("jwks_uri"),
            "jwks": obj.get("jwks"),
            "metadata": obj.get("metadata"),
            "software_id": obj.get("software_id"),
            "software_version": obj.get("software_version"),
            "software_statement": obj.get("software_statement")
        })
        return _obj


