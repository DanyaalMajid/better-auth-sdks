# coding: utf-8

"""
    Better Auth

    API Reference for your Better Auth Instance

    The version of the OpenAPI document: 1.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from better_auth.models.sso_register_post_request_mapping import SsoRegisterPostRequestMapping
from better_auth.models.sso_register_post_request_oidc_config import SsoRegisterPostRequestOidcConfig
from better_auth.models.sso_register_post_request_saml_config import SsoRegisterPostRequestSamlConfig
from typing import Optional, Set
from typing_extensions import Self

class SsoRegisterPostRequest(BaseModel):
    """
    SsoRegisterPostRequest
    """ # noqa: E501
    provider_id: StrictStr = Field(description="The ID of the provider. This is used to identify the provider during login and callback", alias="providerId")
    issuer: StrictStr = Field(description="The issuer of the provider")
    domain: StrictStr = Field(description="The domain of the provider. This is used for email matching")
    oidc_config: Optional[SsoRegisterPostRequestOidcConfig] = Field(default=None, alias="oidcConfig")
    saml_config: Optional[SsoRegisterPostRequestSamlConfig] = Field(default=None, alias="samlConfig")
    mapping: Optional[SsoRegisterPostRequestMapping] = None
    organization_id: Optional[StrictStr] = Field(default=None, description="If organization plugin is enabled, the organization id to link the provider to", alias="organizationId")
    override_user_info: Optional[StrictStr] = Field(default=None, alias="overrideUserInfo")
    __properties: ClassVar[List[str]] = ["providerId", "issuer", "domain", "oidcConfig", "samlConfig", "mapping", "organizationId", "overrideUserInfo"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SsoRegisterPostRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of oidc_config
        if self.oidc_config:
            _dict['oidcConfig'] = self.oidc_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of saml_config
        if self.saml_config:
            _dict['samlConfig'] = self.saml_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of mapping
        if self.mapping:
            _dict['mapping'] = self.mapping.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SsoRegisterPostRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "providerId": obj.get("providerId"),
            "issuer": obj.get("issuer"),
            "domain": obj.get("domain"),
            "oidcConfig": SsoRegisterPostRequestOidcConfig.from_dict(obj["oidcConfig"]) if obj.get("oidcConfig") is not None else None,
            "samlConfig": SsoRegisterPostRequestSamlConfig.from_dict(obj["samlConfig"]) if obj.get("samlConfig") is not None else None,
            "mapping": SsoRegisterPostRequestMapping.from_dict(obj["mapping"]) if obj.get("mapping") is not None else None,
            "organizationId": obj.get("organizationId"),
            "overrideUserInfo": obj.get("overrideUserInfo")
        })
        return _obj


