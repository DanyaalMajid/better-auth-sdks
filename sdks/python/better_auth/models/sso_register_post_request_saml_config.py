# coding: utf-8

"""
    Better Auth

    API Reference for your Better Auth Instance

    The version of the OpenAPI document: 1.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from better_auth.models.sso_register_post_request_saml_config_idp_metadata import SsoRegisterPostRequestSamlConfigIdpMetadata
from better_auth.models.sso_register_post_request_saml_config_sp_metadata import SsoRegisterPostRequestSamlConfigSpMetadata
from typing import Optional, Set
from typing_extensions import Self

class SsoRegisterPostRequestSamlConfig(BaseModel):
    """
    SsoRegisterPostRequestSamlConfig
    """ # noqa: E501
    entry_point: StrictStr = Field(description="The entry point of the provider", alias="entryPoint")
    cert: StrictStr = Field(description="The certificate of the provider")
    callback_url: StrictStr = Field(description="The callback URL of the provider", alias="callbackUrl")
    audience: Optional[StrictStr] = None
    idp_metadata: Optional[SsoRegisterPostRequestSamlConfigIdpMetadata] = Field(default=None, alias="idpMetadata")
    sp_metadata: SsoRegisterPostRequestSamlConfigSpMetadata = Field(alias="spMetadata")
    want_assertions_signed: Optional[StrictBool] = Field(default=None, alias="wantAssertionsSigned")
    signature_algorithm: Optional[StrictStr] = Field(default=None, alias="signatureAlgorithm")
    digest_algorithm: Optional[StrictStr] = Field(default=None, alias="digestAlgorithm")
    identifier_format: Optional[StrictStr] = Field(default=None, alias="identifierFormat")
    private_key: Optional[StrictStr] = Field(default=None, alias="privateKey")
    decryption_pvk: Optional[StrictStr] = Field(default=None, alias="decryptionPvk")
    additional_params: Optional[StrictStr] = Field(default=None, alias="additionalParams")
    __properties: ClassVar[List[str]] = ["entryPoint", "cert", "callbackUrl", "audience", "idpMetadata", "spMetadata", "wantAssertionsSigned", "signatureAlgorithm", "digestAlgorithm", "identifierFormat", "privateKey", "decryptionPvk", "additionalParams"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SsoRegisterPostRequestSamlConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of idp_metadata
        if self.idp_metadata:
            _dict['idpMetadata'] = self.idp_metadata.to_dict()
        # override the default output from pydantic by calling `to_dict()` of sp_metadata
        if self.sp_metadata:
            _dict['spMetadata'] = self.sp_metadata.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SsoRegisterPostRequestSamlConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "entryPoint": obj.get("entryPoint"),
            "cert": obj.get("cert"),
            "callbackUrl": obj.get("callbackUrl"),
            "audience": obj.get("audience"),
            "idpMetadata": SsoRegisterPostRequestSamlConfigIdpMetadata.from_dict(obj["idpMetadata"]) if obj.get("idpMetadata") is not None else None,
            "spMetadata": SsoRegisterPostRequestSamlConfigSpMetadata.from_dict(obj["spMetadata"]) if obj.get("spMetadata") is not None else None,
            "wantAssertionsSigned": obj.get("wantAssertionsSigned"),
            "signatureAlgorithm": obj.get("signatureAlgorithm"),
            "digestAlgorithm": obj.get("digestAlgorithm"),
            "identifierFormat": obj.get("identifierFormat"),
            "privateKey": obj.get("privateKey"),
            "decryptionPvk": obj.get("decryptionPvk"),
            "additionalParams": obj.get("additionalParams")
        })
        return _obj


