# coding: utf-8

"""
    Better Auth

    API Reference for your Better Auth Instance

    The version of the OpenAPI document: 1.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class ApiKeyUpdatePostRequest(BaseModel):
    """
    ApiKeyUpdatePostRequest
    """ # noqa: E501
    key_id: StrictStr = Field(description="The id of the Api Key", alias="keyId")
    user_id: Optional[StrictStr] = Field(default=None, description="The id of the user which the api key belongs to. server-only. Eg: \"some-user-id\"", alias="userId")
    name: Optional[StrictStr] = Field(default=None, description="The name of the key")
    enabled: Optional[StrictBool] = Field(default=None, description="Whether the Api Key is enabled or not")
    remaining: Optional[Union[StrictFloat, StrictInt]] = None
    refill_amount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The refill amount", alias="refillAmount")
    refill_interval: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The refill interval", alias="refillInterval")
    metadata: Optional[StrictStr] = None
    expires_in: StrictStr = Field(alias="expiresIn")
    rate_limit_enabled: Optional[StrictBool] = Field(default=None, description="Whether the key has rate limiting enabled.", alias="rateLimitEnabled")
    rate_limit_time_window: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The duration in milliseconds where each request is counted. server-only. Eg: 1000", alias="rateLimitTimeWindow")
    rate_limit_max: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Maximum amount of requests allowed within a window. Once the `maxRequests` is reached, the request will be rejected until the `timeWindow` has passed, at which point the `timeWindow` will be reset. server-only. Eg: 100", alias="rateLimitMax")
    permissions: StrictStr
    __properties: ClassVar[List[str]] = ["keyId", "userId", "name", "enabled", "remaining", "refillAmount", "refillInterval", "metadata", "expiresIn", "rateLimitEnabled", "rateLimitTimeWindow", "rateLimitMax", "permissions"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ApiKeyUpdatePostRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ApiKeyUpdatePostRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "keyId": obj.get("keyId"),
            "userId": obj.get("userId"),
            "name": obj.get("name"),
            "enabled": obj.get("enabled"),
            "remaining": obj.get("remaining"),
            "refillAmount": obj.get("refillAmount"),
            "refillInterval": obj.get("refillInterval"),
            "metadata": obj.get("metadata"),
            "expiresIn": obj.get("expiresIn"),
            "rateLimitEnabled": obj.get("rateLimitEnabled"),
            "rateLimitTimeWindow": obj.get("rateLimitTimeWindow"),
            "rateLimitMax": obj.get("rateLimitMax"),
            "permissions": obj.get("permissions")
        })
        return _obj


