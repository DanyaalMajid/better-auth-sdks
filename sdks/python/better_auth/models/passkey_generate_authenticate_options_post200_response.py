# coding: utf-8

"""
    Better Auth

    API Reference for your Better Auth Instance

    The version of the OpenAPI document: 1.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from better_auth.models.passkey_generate_register_options_get200_response_authenticator_selection import PasskeyGenerateRegisterOptionsGet200ResponseAuthenticatorSelection
from better_auth.models.passkey_generate_register_options_get200_response_exclude_credentials_inner import PasskeyGenerateRegisterOptionsGet200ResponseExcludeCredentialsInner
from better_auth.models.passkey_generate_register_options_get200_response_rp import PasskeyGenerateRegisterOptionsGet200ResponseRp
from better_auth.models.passkey_generate_register_options_get200_response_user import PasskeyGenerateRegisterOptionsGet200ResponseUser
from typing import Optional, Set
from typing_extensions import Self

class PasskeyGenerateAuthenticateOptionsPost200Response(BaseModel):
    """
    PasskeyGenerateAuthenticateOptionsPost200Response
    """ # noqa: E501
    challenge: Optional[StrictStr] = None
    rp: Optional[PasskeyGenerateRegisterOptionsGet200ResponseRp] = None
    user: Optional[PasskeyGenerateRegisterOptionsGet200ResponseUser] = None
    timeout: Optional[Union[StrictFloat, StrictInt]] = None
    allow_credentials: Optional[List[PasskeyGenerateRegisterOptionsGet200ResponseExcludeCredentialsInner]] = Field(default=None, alias="allowCredentials")
    user_verification: Optional[StrictStr] = Field(default=None, alias="userVerification")
    authenticator_selection: Optional[PasskeyGenerateRegisterOptionsGet200ResponseAuthenticatorSelection] = Field(default=None, alias="authenticatorSelection")
    extensions: Optional[Dict[str, Any]] = None
    __properties: ClassVar[List[str]] = ["challenge", "rp", "user", "timeout", "allowCredentials", "userVerification", "authenticatorSelection", "extensions"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PasskeyGenerateAuthenticateOptionsPost200Response from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of rp
        if self.rp:
            _dict['rp'] = self.rp.to_dict()
        # override the default output from pydantic by calling `to_dict()` of user
        if self.user:
            _dict['user'] = self.user.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in allow_credentials (list)
        _items = []
        if self.allow_credentials:
            for _item_allow_credentials in self.allow_credentials:
                if _item_allow_credentials:
                    _items.append(_item_allow_credentials.to_dict())
            _dict['allowCredentials'] = _items
        # override the default output from pydantic by calling `to_dict()` of authenticator_selection
        if self.authenticator_selection:
            _dict['authenticatorSelection'] = self.authenticator_selection.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PasskeyGenerateAuthenticateOptionsPost200Response from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "challenge": obj.get("challenge"),
            "rp": PasskeyGenerateRegisterOptionsGet200ResponseRp.from_dict(obj["rp"]) if obj.get("rp") is not None else None,
            "user": PasskeyGenerateRegisterOptionsGet200ResponseUser.from_dict(obj["user"]) if obj.get("user") is not None else None,
            "timeout": obj.get("timeout"),
            "allowCredentials": [PasskeyGenerateRegisterOptionsGet200ResponseExcludeCredentialsInner.from_dict(_item) for _item in obj["allowCredentials"]] if obj.get("allowCredentials") is not None else None,
            "userVerification": obj.get("userVerification"),
            "authenticatorSelection": PasskeyGenerateRegisterOptionsGet200ResponseAuthenticatorSelection.from_dict(obj["authenticatorSelection"]) if obj.get("authenticatorSelection") is not None else None,
            "extensions": obj.get("extensions")
        })
        return _obj


